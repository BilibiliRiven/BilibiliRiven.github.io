<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux内核调试</title>
    <link href="/2022/01/17/LinuxKernelDbg/"/>
    <url>/2022/01/17/LinuxKernelDbg/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux内核调试环境搭建"><a href="#Linux内核调试环境搭建" class="headerlink" title="Linux内核调试环境搭建"></a>Linux内核调试环境搭建</h1><p>偶尔要分析一下Linux内核，内核探针有时并不能满足需要（例如调试分析CVE）。采用VM虚拟机通过管道加IDA双机调试很卡，调试体验很差。用KDB双机调试也是卡，有时还会断点无效，死机也是常事。Visual Studio调试内核依然不方便，重点是卡慢。最终还是学习Google使用QEMU调试内核。（网上一大推调试文章，能用好用的并不多，我跟着一路折腾过来真把我弄得够呛。给后来人一个忠告，老老实实在开启虚拟化的Linux虚拟机中使用QEMU+gdb）</p><h1 id="靠谱点的资料"><a href="#靠谱点的资料" class="headerlink" title="靠谱点的资料"></a>靠谱点的资料</h1><p>多读牛逼人的一手资料，官方文档。每次找资料真找的我血压升高。下面文档高质量的有google的文章，和jiayy的文章还有看雪的文章。</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.starlab.io<span class="hljs-regexp">/blog/u</span>sing-gdb-to-debug-the-linux-kernel<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/google/</span>syzkaller<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/docs/</span>linux/setup_ubuntu-host_qemu-vm_x86-<span class="hljs-number">64</span>-kernel.md<br>https:<span class="hljs-regexp">//</span>www.kernel.org<span class="hljs-regexp">/doc/</span>html<span class="hljs-regexp">/latest/</span>dev-tools/gdb-kernel-debugging.html<br>https:<span class="hljs-regexp">//</span>bbs.pediy.com/thread-<span class="hljs-number">252344</span>.htm<br>http:<span class="hljs-regexp">//</span>jiayy.me<span class="hljs-regexp">/2020/</span><span class="hljs-number">05</span><span class="hljs-regexp">/13/</span>qemu+gdb+kernel/<br></code></pre></td></tr></table></figure><h2 id="我的环境搭建过程"><a href="#我的环境搭建过程" class="headerlink" title="我的环境搭建过程"></a>我的环境搭建过程</h2><h3 id="Ubuntu安装VMTool"><a href="#Ubuntu安装VMTool" class="headerlink" title="Ubuntu安装VMTool"></a>Ubuntu安装VMTool</h3><p>拷贝vmare-tools-distrib到桌面。<br>运行tar -zxvf解压<br>运行sudo ./vmare-install.ph</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">### 修复不能从桌面拷贝的问题<br>sudo apt-get install open-vm-tools-desktop<br>### 能选Yes就Yes，剩下一路默认就好<br></code></pre></td></tr></table></figure><h3 id="修改Ubuntu源"><a href="#修改Ubuntu源" class="headerlink" title="修改Ubuntu源"></a>修改Ubuntu源</h3><p>获取Codename</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">lsb_release -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>将TODO替换成Codename</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> TODO main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> TODO main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> TODO-security main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> TODO-security main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> TODO-updates main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> TODO-updates main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> TODO-proposed main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> TODO-proposed main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> TODO-backports main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> TODO-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>替换后格式如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-security main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-security main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-updates main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-updates main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-proposed main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-proposed main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-backports main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>更新软件列表</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo apt update</span><br></code></pre></td></tr></table></figure><h3 id="编译Linux内核"><a href="#编译Linux内核" class="headerlink" title="编译Linux内核"></a>编译Linux内核</h3><p>环境准备</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># make menuconfig的相关依赖</span><br>sudo apt <span class="hljs-keyword">install </span>libncurses-dev<br>sudo apt <span class="hljs-keyword">install </span>flex<br>sudo apt <span class="hljs-keyword">install </span><span class="hljs-keyword">bison</span><br><span class="hljs-keyword"></span><span class="hljs-comment"># make 编译需要</span><br>sudo apt <span class="hljs-keyword">install </span><span class="hljs-keyword">build-essentail </span><span class="hljs-comment"># 可能不需要</span><br>sudo apt <span class="hljs-keyword">install </span>libssl-dev<br>sudo apt <span class="hljs-keyword">install </span>libelf-dev<br></code></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vala">make defconfig kvm_guest.config<br>make menuconfig<br><span class="hljs-meta">#CONFIG_GDB_SCRIPTS=enabled</span><br><span class="hljs-meta">#CONFIG_DEBUG_INFO_REDUCED =off</span><br><span class="hljs-meta">#CONFIG_FRAME_POINTER=enabled</span><br><span class="hljs-meta">#CONFIG_RANDOMIZE_BASE=off</span><br><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">make bzImage -j<span class="hljs-constructor">$(<span class="hljs-params">nproc</span>)</span><span class="hljs-operator"> &amp;&amp; </span>make vmlinux -j<span class="hljs-constructor">$(<span class="hljs-params">nproc</span>)</span><br></code></pre></td></tr></table></figure><h2 id="配置QEMU虚拟机"><a href="#配置QEMU虚拟机" class="headerlink" title="配置QEMU虚拟机"></a>配置QEMU虚拟机</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> qemu<br>sudo apt <span class="hljs-keyword">install</span> qemu-system-x86<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle">qemu-system-x86_64   \<br>-smp <span class="hljs-number">4</span> \<br>-enable-kvm -m <span class="hljs-number">2</span>G -nographic \<br>-kernel <span class="hljs-regexp">/path-to/</span>linux<span class="hljs-regexp">/arch/</span>x86<span class="hljs-regexp">/boot/</span>bzImage  \<br>-<span class="hljs-keyword">append</span> <span class="hljs-string">&quot;console=ttyS0 root=/dev/sda earlyprintk=serial rw nokaslr&quot;</span>  \<br>-drive <span class="hljs-keyword">file</span>=<span class="hljs-regexp">/path-to/</span>focal.img,format=raw   \<br>-device e1000,netdev=t0  \<br>-pidfile vm.pid \<br>-netdev user,id=t0,hostfwd=tcp::<span class="hljs-number">10022</span>-:<span class="hljs-number">22</span> -s -S  <br></code></pre></td></tr></table></figure><h3 id="配置wget代理"><a href="#配置wget代理" class="headerlink" title="配置wget代理"></a>配置wget代理</h3><p>能访问外网的实验室就不用了。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>wgetrc<br><span class="hljs-comment">#You can set the default proxies for Wget to use for http, https, and ftp.</span><br><span class="hljs-comment"># They will override the value in the environment.</span><br>https_proxy = http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7890</span>/<br>http_proxy = http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7890</span>/<br>ftp_proxy = http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7890</span>/<br><br><span class="hljs-comment"># If you do not want to use proxy at all, set this to off.</span><br>use_proxy = on<br></code></pre></td></tr></table></figure><h3 id="配置磁盘镜像"><a href="#配置磁盘镜像" class="headerlink" title="配置磁盘镜像"></a>配置磁盘镜像</h3><p>安装debootstrap</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> debootstrap<br></code></pre></td></tr></table></figure><p>通过debootstrap构建ubuntu镜像。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># create-image.sh creates a minimal ubuntu image suitable for kernel debugging.</span><br><span class="hljs-comment"># Copyright 2020 chengjia4574@gmail.com（修改了一点点）</span><br><br>set -eux<br><br><span class="hljs-comment">#RELEASE=eoan  # ubuntu19.10</span><br>RELEASE=focal <span class="hljs-comment"># ubuntu20.04</span><br><br>DIR=chroot-<span class="hljs-variable">$RELEASE</span><br>sudo rm -rf <span class="hljs-variable">$DIR</span><br>sudo mkdir -p <span class="hljs-variable">$DIR</span><br>sudo chmod <span class="hljs-number">0755</span> <span class="hljs-variable">$DIR</span><br><br>INSTALL_PKGS=openssh-server,curl,tar,gcc,libc6-dev,time,strace,sudo,less,psmisc,net-tools,build-essential,vim,git,make<br><br>sudo debootstrap --include=<span class="hljs-variable">$INSTALL_PKGS</span> --components=main,contrib,non-free <span class="hljs-variable">$RELEASE</span> <span class="hljs-variable">$DIR</span><br><br><span class="hljs-comment"># Set some defaults and enable promtless ssh to the machine for root.</span><br>sudo sed -i <span class="hljs-string">&#x27;/^root/ &#123; s/:x:/::/ &#125;&#x27;</span> <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>passwd<br>echo <span class="hljs-string">&#x27;T0:23:respawn:/sbin/getty -L ttyS0 115200 vt100&#x27;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/i</span>nittab<br><span class="hljs-comment"># 必须关闭 kaslr 才可以正常调试内核</span><br>echo <span class="hljs-string">&#x27;GRUB_CMDLINE_LINUX_DEFAULT=&quot;nokaslr&quot;&#x27;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>default/grub<br><span class="hljs-comment"># /etc/network/interfaces 已经被 ubuntu 放弃，改为了　netplan 方式</span><br>printf <span class="hljs-string">&#x27;network:\n version: 2\n renderer: networkd\n ethernets:\n enp0s3:\n dhcp4: true\n&#x27;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>netplan/<span class="hljs-number">01</span>-network-manager-all.yaml<br>echo <span class="hljs-string">&#x27;/dev/root / ext4 defaults 0 0&#x27;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>fstab<br>echo <span class="hljs-string">&#x27;debugfs /sys/kernel/debug debugfs defaults 0 0&#x27;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>fstab<br>echo <span class="hljs-string">&#x27;securityfs /sys/kernel/security securityfs defaults 0 0&#x27;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>fstab<br>echo <span class="hljs-string">&#x27;configfs /sys/kernel/config/ configfs defaults 0 0&#x27;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>fstab<br>echo <span class="hljs-string">&#x27;binfmt_misc /proc/sys/fs/binfmt_misc binfmt_misc defaults 0 0&#x27;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>fstab<br>echo <span class="hljs-string">&quot;kernel.printk = 7 4 1 3&quot;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>sysctl.conf<br>echo <span class="hljs-string">&#x27;debug.exception-trace = 0&#x27;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>sysctl.conf<br>echo <span class="hljs-string">&quot;net.core.bpf_jit_enable = 1&quot;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>sysctl.conf<br>echo <span class="hljs-string">&quot;net.core.bpf_jit_kallsyms = 1&quot;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>sysctl.conf<br>echo <span class="hljs-string">&quot;net.core.bpf_jit_harden = 0&quot;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>sysctl.conf<br>echo <span class="hljs-string">&quot;kernel.softlockup_all_cpu_backtrace = 1&quot;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>sysctl.conf<br>echo <span class="hljs-string">&quot;kernel.kptr_restrict = 0&quot;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>sysctl.conf<br>echo <span class="hljs-string">&quot;kernel.watchdog_thresh = 60&quot;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>sysctl.conf<br>echo <span class="hljs-string">&quot;net.ipv4.ping_group_range = 0 65535&quot;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>sysctl.conf<br>echo -en <span class="hljs-string">&quot;127.0.0.1\tlocalhost\n&quot;</span> | sudo tee <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>hosts<br>echo <span class="hljs-string">&quot;nameserver 8.8.8.8&quot;</span> | sudo tee -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>resolve.conf<br>echo <span class="hljs-string">&quot;jiayy&quot;</span> | sudo tee <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/etc/</span>hostname<br>ssh-keygen -f <span class="hljs-variable">$RELEASE</span>.id_rsa -t rsa -N <span class="hljs-string">&#x27;&#x27;</span><br>sudo mkdir -p <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/root/</span>.ssh/<br>cat <span class="hljs-variable">$RELEASE</span>.id_rsa.pub | sudo tee <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/root/</span>.ssh/authorized_keys<br><br><span class="hljs-comment"># Build a disk image</span><br>dd <span class="hljs-keyword">if</span>=<span class="hljs-regexp">/dev/</span>zero of=<span class="hljs-variable">$RELEASE</span>.img bs=<span class="hljs-number">1</span>G seek=<span class="hljs-number">20</span> count=<span class="hljs-number">1</span><br>sudo mkfs.ext4 -F <span class="hljs-variable">$RELEASE</span>.img<br>sudo mkdir -p <span class="hljs-regexp">/mnt/</span><span class="hljs-variable">$DIR</span><br>sudo mount -o loop <span class="hljs-variable">$RELEASE</span>.img <span class="hljs-regexp">/mnt/</span><span class="hljs-variable">$DIR</span><br>sudo cp -a <span class="hljs-variable">$DIR</span><span class="hljs-regexp">/. /m</span>nt<span class="hljs-regexp">/$DIR/</span>.<br>sudo umount <span class="hljs-regexp">/mnt/</span><span class="hljs-variable">$DIR</span><br><br></code></pre></td></tr></table></figure><p>采用google方法构建Debian Stretch Linux镜像(原理一样)<br>前期不要纠结脚本内容以及含义快点把这步过去早点开始调试Linux内核。</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">mkdir</span> $<span class="hljs-string">IMAGE</span><br><span class="hljs-string">cd</span> $<span class="hljs-string">IMAGE</span>/<br><span class="hljs-string">sudo</span> <span class="hljs-string">wget</span> <span class="hljs-string">https</span>://<span class="hljs-string">raw</span>.<span class="hljs-string">githubusercontent</span>.<span class="hljs-string">com</span>/<span class="hljs-string">google</span>/<span class="hljs-string">syzkaller</span>/<span class="hljs-string">master</span>/<span class="hljs-string">tools</span>/<span class="hljs-built_in">create-image.sh</span> -<span class="hljs-string">O</span> <span class="hljs-built_in">create-image.sh</span><br><span class="hljs-string">chmod</span> +<span class="hljs-string">x</span> <span class="hljs-built_in">create-image.sh</span><br>./<span class="hljs-built_in">create-image.sh</span><br></code></pre></td></tr></table></figure><p><img src="/images/LinuxKernelDbg/image-20220117024152557.png" alt="image-20220117024152557"></p><h2 id="启动Qemu虚拟机"><a href="#启动Qemu虚拟机" class="headerlink" title="启动Qemu虚拟机"></a>启动Qemu虚拟机</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haml">qemu-system-x86_64 \<br>-<span class="ruby">m 2G \</span><br><span class="ruby"></span>-<span class="ruby">smp <span class="hljs-number">2</span> \</span><br><span class="ruby"></span>-<span class="ruby">kernel <span class="hljs-variable">$KERNEL</span>/arch/x86/boot/bzImage \</span><br><span class="ruby"></span>-<span class="ruby">append <span class="hljs-string">&quot;console=ttyS0 root=/dev/sda earlyprintk=serial net.ifnames=0&quot;</span> \</span><br><span class="ruby"></span>-<span class="ruby">drive file=<span class="hljs-variable">$IMAGE</span>/stretch.img,format=raw \</span><br><span class="ruby"></span>-<span class="ruby">net user,host=<span class="hljs-number">10.0</span>.<span class="hljs-number">2.10</span>,hostfwd=<span class="hljs-symbol">tcp:</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-symbol">:</span><span class="hljs-number">10021</span>-<span class="hljs-symbol">:</span><span class="hljs-number">22</span> \</span><br><span class="ruby"></span>-<span class="ruby">net nic,model=e1000 \</span><br><span class="ruby"></span>-<span class="ruby">enable-kvm \</span><br><span class="ruby"></span>-<span class="ruby">nographic \</span><br><span class="ruby"></span>-<span class="ruby">pidfile vm.pid \</span><br><span class="ruby"></span>2&gt;&amp;1 | tee vm.log<br></code></pre></td></tr></table></figure><h2 id="安装gef"><a href="#安装gef" class="headerlink" title="安装gef"></a>安装gef</h2><p>如果公司没有代理，就手动下载gdbinit-gef.py，执行命令。<br>不过最好提前先备份~/.gdbinit。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ wget -O ~<span class="hljs-regexp">/.gdbinit-gef.py -q http:/</span><span class="hljs-regexp">/gef.blah.cat/</span>py<br>$ echo <span class="hljs-keyword">source</span> ~<span class="hljs-regexp">/.gdbinit-gef.py &gt;&gt; ~/</span>.gdbinit<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从零开始自制操作系统01</title>
    <link href="/2022/01/17/MakeMyOs01/"/>
    <url>/2022/01/17/MakeMyOs01/</url>
    
    <content type="html"><![CDATA[<h1 id="从零开始自制操作系统01"><a href="#从零开始自制操作系统01" class="headerlink" title="从零开始自制操作系统01"></a>从零开始自制操作系统01</h1><h2 id="系统启动过程"><a href="#系统启动过程" class="headerlink" title="系统启动过程"></a>系统启动过程</h2><p>按下启动键，主板发送信号给电源，而电源收到信号后会给电脑供应合适的电量。一旦主板收到了电源备妥信号，它会尝试启动CPU。CPU加电，复位引脚被置位，CPU内的寄存器状态也被重置。<br>举例，在CPU中有一个寄存器叫CR0寄存器，在CPU加电，复位引脚被置位时CR0被设置为60000010H，CR0被置为让CPU处于实模式状态。</p><img src="/images/MakeMyOs01/image-20220116122339090.png" alt="image-20220116122339090" style="zoom:67%;" /><p>通过查阅手册可以得知。(查看Intel手册第三卷第9章可以发现，CPU内其他相关寄存器被置位的详细情况)</p><figure class="highlight x86asm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">IP</span>          <span class="hljs-number">0xfff0</span><br><span class="hljs-built_in">CS</span> selector <span class="hljs-number">0xf000</span><br><span class="hljs-built_in">CS</span> base     <span class="hljs-number">0xffff0000</span><br><span class="hljs-built_in">CR0</span><span class="hljs-number">60000010H</span><br></code></pre></td></tr></table></figure><p>根据CR0值可知，CPU处于实模式。进而推出此时CPU的寻址方式是分段方式。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">PhysicalAddress = 基地址(<span class="hljs-built_in">Base</span> <span class="hljs-built_in">address</span>) + 偏移(<span class="hljs-built_in">Offset</span>)<br></code></pre></td></tr></table></figure><p>结合寄存器CS和IP的值可以推导出。CPU即将执行的第一条指令，位于物理地址0xffff0000 + 0xfff0=’0xfffffff0’处。<br>而这条指令通常是一个跳转指令，目的是为了将CPU执行引向主板BIOS程序的入口点。<br>(有过装机经验的朋友知道，在开机按下F12进入BIOS配置界面时，而这个BIOS配置界面不就是BIOS程序的一部分吗。就是说你在BIOS配置界面配置时，此时CPU已经执行过地址’0xfffffff0’处跳转指令，正在运行BIOS程序。)以我目前的知识只知道，BIOS程序完成的功能有，设备检测，启动项管理，根据启动项选择启动设备，并启动(硬盘启动，软盘启动，u盘启动)。</p><h3 id="BIOS引导"><a href="#BIOS引导" class="headerlink" title="BIOS引导"></a>BIOS引导</h3><p>假设BIOS根据启动项，选择了软盘启动。BIOS程序会去检查软盘是否有引导闪区。如果软盘存在引导扇区就把扇区的数据复制到内存地址0x7c00处，跳转到0x7c00处执行。意味着CPU离开BIOS程序开始执行Bootloader。</p><p>引导闪区定义(软盘):软盘的第0磁头，第0磁道，第一个扇区十分以0x550xaa结尾。<br><img src="/images/MakeMyOs01/image-20220116130753285.png" alt="image-20220116130753285" style="zoom: 33%;" />引用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">一个<span class="hljs-number">64</span>位操作系统的设计与实现<br>Intel手册第三卷第九章<br>清华大学操作系统试验课程<br>Linux 内核揭秘https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/MintCN/</span>linux-insides-zh<br></code></pre></td></tr></table></figure><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>自己制作一个简单“引导”程序放在，软盘(虚拟)的引导扇区，用Boches虚拟机执行。（附加:在根据清华大学os课程，用qemu复现）</p><p>实验环境描述</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Linux</span> qemugdb <span class="hljs-number">5</span>.<span class="hljs-number">11</span>.<span class="hljs-number">0</span>-<span class="hljs-number">41</span>-generic #<span class="hljs-number">45</span>~<span class="hljs-number">20</span>.<span class="hljs-number">04</span>.<span class="hljs-number">1</span>-Ubuntu SMP Wed Nov <span class="hljs-number">10</span> <span class="hljs-number">10</span>:<span class="hljs-number">20</span>:<span class="hljs-number">10</span> UTC <span class="hljs-number">2021</span> x<span class="hljs-number">86</span>_<span class="hljs-number">64</span> x<span class="hljs-number">86</span>_<span class="hljs-number">64</span> x<span class="hljs-number">86</span>_<span class="hljs-number">64</span> GNU/Linux<br></code></pre></td></tr></table></figure><h3 id="编译Boches"><a href="#编译Boches" class="headerlink" title="编译Boches"></a>编译Boches</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sudo apt-get install build-essential<br>sudo apt-get install libgtk2.<span class="hljs-number">0</span>-dev<br>sudo apt-get install xorg-dev<br>./.conf.linux <br>./configure --enable-smp <span class="hljs-string">\</span><br>              --enable-cpu-level=<span class="hljs-number">6</span> <span class="hljs-string">\</span><br>              --enable-all-optimizations <span class="hljs-string">\</span><br>              --enable-x86-<span class="hljs-number">64</span> <span class="hljs-string">\</span><br>              --enable-pci <span class="hljs-string">\</span><br>              --enable-vmx <span class="hljs-string">\</span><br>              --enable-<span class="hljs-keyword">debugger</span> <span class="hljs-string">\</span><br>              --enable-disasm <span class="hljs-string">\</span><br>              --enable-<span class="hljs-keyword">debugger</span>-gui <span class="hljs-string">\</span><br>              --enable-logging <span class="hljs-string">\</span><br>              --enable-fpu <span class="hljs-string">\</span><br>              --enable-<span class="hljs-number">3dnow</span> <span class="hljs-string">\</span><br>              --enable-sb16=dummy <span class="hljs-string">\</span><br>              --enable-cdrom <span class="hljs-string">\</span><br>              --enable-x86-<span class="hljs-keyword">debugger</span> <span class="hljs-string">\</span><br>              --enable-iodebug <span class="hljs-string">\</span><br>              --disable-plugins <span class="hljs-string">\</span><br>              --disable-docbook <span class="hljs-string">\</span><br>              --<span class="hljs-keyword">with</span>-x --<span class="hljs-keyword">with</span>-x11 --<span class="hljs-keyword">with</span>-term<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h3 id="启动环境配置脚本"><a href="#启动环境配置脚本" class="headerlink" title="启动环境配置脚本"></a>启动环境配置脚本</h3><p>什么是启动环境配置脚本？<br>一台真实的机器，有Intel64位8700kCPU，500G硬盘，8G内存条，xx键盘，xx鼠标，1920*1080显示器….等等设备。<br>Boches作为一台虚拟机需要模拟真实机器的行为，需要知道真实机器的具体配置。启动环境配置脚本就是用来告诉Boches虚拟机去模拟一个什么样的真实机器。（即用来描述真实机器的具体配置）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># configuration file generated by Bochs</span><br>plugin_ctrl: <span class="hljs-attribute">unmapped</span>=1, <span class="hljs-attribute">biosdev</span>=1, <span class="hljs-attribute">speaker</span>=1, <span class="hljs-attribute">extfpuirq</span>=1, <span class="hljs-attribute">parallel</span>=1, <span class="hljs-attribute">serial</span>=1, <span class="hljs-attribute">iodebug</span>=1<br>config_interface: textconfig<br>display_library: x<br><span class="hljs-comment">#memory: host=2048, guest=2048</span><br>romimage: <span class="hljs-attribute">file</span>=<span class="hljs-string">&quot;/usr/local/share/bochs/BIOS-bochs-latest&quot;</span><br>vgaromimage: <span class="hljs-attribute">file</span>=<span class="hljs-string">&quot;/usr/local/share/bochs/VGABIOS-lgpl-latest&quot;</span><br>boot: floppy<br>floppy_bootsig_check: <span class="hljs-attribute">disabled</span>=0<br>floppya: <span class="hljs-attribute">type</span>=1_44, <span class="hljs-attribute">1_44</span>=<span class="hljs-string">&quot;boot.img&quot;</span>, <span class="hljs-attribute">status</span>=inserted, <span class="hljs-attribute">write_protected</span>=0<br><span class="hljs-comment"># no floppyb</span><br>ata0: <span class="hljs-attribute">enabled</span>=1, <span class="hljs-attribute">ioaddr1</span>=0x1f0, <span class="hljs-attribute">ioaddr2</span>=0x3f0, <span class="hljs-attribute">irq</span>=14<br>ata0-master: <span class="hljs-attribute">type</span>=none<br>ata0-slave: <span class="hljs-attribute">type</span>=none<br>ata1: <span class="hljs-attribute">enabled</span>=1, <span class="hljs-attribute">ioaddr1</span>=0x170, <span class="hljs-attribute">ioaddr2</span>=0x370, <span class="hljs-attribute">irq</span>=15<br>ata1-master: <span class="hljs-attribute">type</span>=none<br>ata1-slave: <span class="hljs-attribute">type</span>=none<br>ata2: <span class="hljs-attribute">enabled</span>=0<br>ata3: <span class="hljs-attribute">enabled</span>=0<br>pci: <span class="hljs-attribute">enabled</span>=1, <span class="hljs-attribute">chipset</span>=i440fx<br>vga: <span class="hljs-attribute">extension</span>=vbe, <span class="hljs-attribute">update_freq</span>=5<br> <br>cpu: <span class="hljs-attribute">count</span>=1:1:1, <span class="hljs-attribute">ips</span>=4000000, <span class="hljs-attribute">quantum</span>=16, <span class="hljs-attribute">model</span>=corei7_sandy_bridge_2600k, <span class="hljs-attribute">reset_on_triple_fault</span>=1, <span class="hljs-attribute">cpuid_limit_winnt</span>=0, <span class="hljs-attribute">ignore_bad_msrs</span>=1, <span class="hljs-attribute">mwait_is_nop</span>=0, <span class="hljs-attribute">msrs</span>=<span class="hljs-string">&quot;msrs.def&quot;</span><br> <br><br>print_timestamps: <span class="hljs-attribute">enabled</span>=0<br>debugger_log: -<br>magic_break: <span class="hljs-attribute">enabled</span>=0<br>port_e9_hack: <span class="hljs-attribute">enabled</span>=0<br>private_colormap: <span class="hljs-attribute">enabled</span>=0<br>clock: <span class="hljs-attribute">sync</span>=none, <span class="hljs-attribute">time0</span>=local, <span class="hljs-attribute">rtc_sync</span>=0<br><span class="hljs-comment"># no cmosimage</span><br><span class="hljs-comment"># no loader</span><br>log: -<br>logprefix: %t%e%d<br>debug: <span class="hljs-attribute">action</span>=ignore<br>info: <span class="hljs-attribute">action</span>=report<br>error: <span class="hljs-attribute">action</span>=report<br>panic: <span class="hljs-attribute">action</span>=ask<br>keyboard: <span class="hljs-attribute">type</span>=mf, <span class="hljs-attribute">serial_delay</span>=250, <span class="hljs-attribute">paste_delay</span>=100000, <span class="hljs-attribute">user_shortcut</span>=none<br>mouse: <span class="hljs-attribute">type</span>=ps2, <span class="hljs-attribute">enabled</span>=0, <span class="hljs-attribute">toggle</span>=ctrl+mbutton<br>speaker: <span class="hljs-attribute">enabled</span>=1, <span class="hljs-attribute">mode</span>=system<br>parport1: <span class="hljs-attribute">enabled</span>=1, <span class="hljs-attribute">file</span>=none<br>parport2: <span class="hljs-attribute">enabled</span>=0<br>com1: <span class="hljs-attribute">enabled</span>=1, <span class="hljs-attribute">mode</span>=<span class="hljs-literal">null</span><br>com2: <span class="hljs-attribute">enabled</span>=0<br>com3: <span class="hljs-attribute">enabled</span>=0<br>com4: <span class="hljs-attribute">enabled</span>=0<br> <br>megs: 2048<br></code></pre></td></tr></table></figure><h3 id="cpu-directive-malformed"><a href="#cpu-directive-malformed" class="headerlink" title="cpu directive malformed"></a>cpu directive malformed</h3><p>在用脚本启动boches虚拟机的过程中遭遇如下错误。</p><p><img src="/images/MakeMyOs01/image-20220116125119160.png" alt="image-20220116125119160"></p><p><img src="/images/MakeMyOs01/image-20220116132106992.png" alt="image-20220116132106992"></p><p>查阅<a href="http://www.bytekits.com/bochs/bochs-cpu.html">Bochs教程</a> 后了解到是CPU Model设置错误。通过命令”bochs -help cpu”可以活得当前虚拟机所支持的CPU型号。由于我要编写的基于x86架构的64位操作系统，因此我选择corei7_sandy_bridge_2600k作为CPU model。于此同时根据<a href="http://www.bytekits.com/bochs/bochs-cpu.html">Bochs教程</a>一旦CPU Model被设定，那么CPUID选项则不在有效，因此可以不写CPUID的配置项。</p><img src="/images/MakeMyOs01/image-20220116125532561.png" alt="image-20220116125532561" style="zoom: 67%;" /><h3 id="制作引导程序"><a href="#制作引导程序" class="headerlink" title="制作引导程序"></a>制作引导程序</h3><p>引导程序源码，采用NASM编译。编译命令如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nasm boot.asm -o boot.bin<br></code></pre></td></tr></table></figure><p><img src="/images/MakeMyOs01/image-20220116135409192.png" alt="image-20220116135409192"></p><p>org 0x7c00，告诉编译器代码块起始地址0x7c00，因此访问全局变量时，应该以0x7c00位基地址计算偏移量。$编译器会解释为当前地址，$$编译器会解释为代码块首地址。times n db 0，告诉编译器从当前位置开始向后填充n词0字节。综上所述”times    510 - ($ - $$)    db    0”，的意思就是将引导扇区前510个字节，没有被代码占用的字节设置位0。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">org<span class="hljs-number">0x7c00</span><br> <br>BaseOfStack<span class="hljs-built_in">equ</span><span class="hljs-number">0x7c00</span><br><span class="hljs-symbol"> </span><br><span class="hljs-symbol">Label_Start:</span><br><span class="hljs-comment">;=======init all register to 0x7c00</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">ax</span>,<span class="hljs-built_in">cs</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">ss</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">sp</span>,BaseOfStack<br> <br><span class="hljs-comment">;=======clear screen</span><br> <br><span class="hljs-keyword">mov</span><span class="hljs-built_in">ax</span>,<span class="hljs-number">0600h</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">bx</span>,<span class="hljs-number">0700h</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">cx</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">dx</span>,<span class="hljs-number">0184fh</span><br><span class="hljs-keyword">int</span><span class="hljs-number">10h</span><br> <br><span class="hljs-comment">;=======set focus</span><br> <br><span class="hljs-keyword">mov</span><span class="hljs-built_in">ax</span>,<span class="hljs-number">0200h</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">bx</span>,<span class="hljs-number">0000h</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">dx</span>,<span class="hljs-number">0000h</span><br><span class="hljs-keyword">int</span><span class="hljs-number">10h</span><br> <br><span class="hljs-comment">;=======display on screen : Start Booting......</span><br> <br><span class="hljs-keyword">mov</span><span class="hljs-built_in">ax</span>,<span class="hljs-number">1301h</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">bx</span>,<span class="hljs-number">000fh</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">dx</span>,<span class="hljs-number">0000h</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">cx</span>,<span class="hljs-number">10</span><br><span class="hljs-keyword">push</span><span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">ax</span>,<span class="hljs-built_in">ds</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br><span class="hljs-keyword">pop</span><span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span><span class="hljs-built_in">bp</span>,StartBootMessage<br><span class="hljs-keyword">int</span><span class="hljs-number">10h</span><br> <br><span class="hljs-comment">;=======reset floppy</span><br> <br><span class="hljs-keyword">xor</span><span class="hljs-number">ah</span>,<span class="hljs-number">ah</span><br><span class="hljs-keyword">xor</span><span class="hljs-built_in">dl</span>,<span class="hljs-built_in">dl</span><br><span class="hljs-keyword">int</span><span class="hljs-number">13h</span><br> <br><span class="hljs-keyword">jmp</span>$<br><span class="hljs-symbol"> </span><br><span class="hljs-symbol">StartBootMessage:</span><span class="hljs-built_in">db</span><span class="hljs-string">&quot;Start Boot&quot;</span><br> <br><span class="hljs-comment">;=======fill zero until whole sector</span><br> <br><span class="hljs-built_in">times</span><span class="hljs-number">510</span> - ($ - $$)<span class="hljs-built_in">db</span><span class="hljs-number">0</span><br><span class="hljs-built_in">dw</span><span class="hljs-number">0xaa55</span><br></code></pre></td></tr></table></figure><h3 id="制作软盘镜像"><a href="#制作软盘镜像" class="headerlink" title="制作软盘镜像"></a>制作软盘镜像</h3><p>前面已经编译了大小为512字节的引导程序。现在需要将512字节的引导程序写入，虚拟软盘的第一个扇区。这样虚拟机就会将软盘识别为启动盘。</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>用bochs虚拟机提供的小工具bximage’’制作软盘镜像，输入1，选择创建软盘或硬盘镜像。</p><img src="/images/MakeMyOs01/image-20220116140729093.png" alt="image-20220116140729093" style="zoom:67%;" /><p>输入fd，创建软盘。</p><img src="/images/MakeMyOs01/image-20220116141014453.png" alt="image-20220116141014453" style="zoom: 67%;" /><p>创建大小1.44M软盘镜像，并且设置镜像名。</p><img src="/images/MakeMyOs01/image-20220116141334486.png" alt="image-20220116141334486" style="zoom:67%;" /><h4 id="第二部"><a href="#第二部" class="headerlink" title="第二部"></a>第二部</h4><p>到此软盘镜像已经创建完毕，应该向软盘镜像写入引导程序了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dd <span class="hljs-keyword">if</span>=boot.bin of=boot.img bs=512 count=1 conv=notrunc<br></code></pre></td></tr></table></figure><ul><li>if 表示从文件获取输入(而不是从stdin)，这里即为编译后的二进制机器码文件boot.bin</li><li>of 表示输出到文件(而不是输出到stdout)，这里指的是a.img</li><li>bs 一个操作块的大小，默认512。（dd读写操作以块为单位）</li><li>一共操作几次。（这里只用操作一次）</li><li>conv=notrunc，表示不截断文件。</li></ul><h5 id="如何理解截断"><a href="#如何理解截断" class="headerlink" title="如何理解截断"></a>如何理解截断</h5><p>如果输入文件1块，输出文件有12块。执行”dd if=boot.bin of=boot.img bs=512 count=1”命令后，输出文件大小只有个1个块。剩余的11块被截断掉了。</p><p>并且如果块大小为512字节，而输入文件只有510字节。执行”dd if=boot.bin of=boot.img bs=512 count=1”命令后。输出块依然有510字节，不够的两个字节，并未被补齐。</p><h3 id="启动动虚拟机"><a href="#启动动虚拟机" class="headerlink" title="启动动虚拟机"></a>启动动虚拟机</h3><p>启动命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bochs -f ./bochsrc<br></code></pre></td></tr></table></figure><p><img src="/images/MakeMyOs01/image-20220116132945444.png" alt="image-20220116132945444"></p><h3 id="用qemu执行引导程序"><a href="#用qemu执行引导程序" class="headerlink" title="用qemu执行引导程序"></a>用qemu执行引导程序</h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/qq_37637619/article/details/89866689">https://blog.csdn.net/qq_37637619/article/details/89866689</a><br><a href="http://www.bytekits.com/bochs/bochs-cpu.html">Bochs教程</a> 解决bochs启动脚本CPU model报错</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好Win10驱动开发</title>
    <link href="/2022/01/17/HelloWindowsDriver/"/>
    <url>/2022/01/17/HelloWindowsDriver/</url>
    
    <content type="html"><![CDATA[<h1 id="你好Win10驱动开发"><a href="#你好Win10驱动开发" class="headerlink" title="你好Win10驱动开发"></a>你好Win10驱动开发</h1><h2 id="搭建WDK环境"><a href="#搭建WDK环境" class="headerlink" title="搭建WDK环境"></a>搭建WDK环境</h2><p>使用Win10 1909作为开发系统即10363，因为PCHunter支持的最高版本是win10 10363。这个内核工具<br>在以后非常有用。</p><p>在安装WDK之前，先安装正确的SKD，WDK与SDK的版本要对应。我选用的SDK 10.0.18362.0,<br>以及Windows 10 版本 1903 的 WDK。</p><p>下载VS2019，在VS2019安装KMDF框架(就是驱动开发模板)。</p><p>创建一个最简单KWDF项目，尝试编译。</p><h2 id="编译报错问题"><a href="#编译报错问题" class="headerlink" title="编译报错问题"></a>编译报错问题</h2><p>MSB8040    此项目需要缓解了 Spectre 漏洞的库。</p><p>解决办法1 ，安装对应SDK Spectre缓解。<br>解决办法2 ，禁用Spectre 强制检查(鼠标右键属性attribute-&gt;C/C++-&gt;Code Generation-&gt;Spectre)。(推荐这种，前期不要研究有得卖的。)</p><p>“Inf2Cat, signability test failed.” Double click to see the tool output.1    </p><p>解决方案1，禁用Inf2Cat(attribute-&gt;Inf2Cat)</p><h2 id="关闭驱动强制签名，安装驱动"><a href="#关闭驱动强制签名，安装驱动" class="headerlink" title="关闭驱动强制签名，安装驱动"></a>关闭驱动强制签名，安装驱动</h2><p>Win10 默认要求驱动有签名，没签名的驱动禁止安装。自己编译的驱动往往没有签名。因此要关闭win10对驱动签名的检查。<br>参考方法:<a href="https://jingyan.baidu.com/article/624e74594dbc8d34e8ba5aa6.html%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E6%AD%A5%E8%A6%81%E6%B3%A8%E6%84%8F%E6%98%AFF7%E4%B8%8D%E6%98%AF7%E3%80%82">https://jingyan.baidu.com/article/624e74594dbc8d34e8ba5aa6.html，最后一步要注意是F7不是7。</a></p><p>关闭以后，通过OSRLOADER.exe，免重启安装驱动。</p><h2 id="接受驱动日志"><a href="#接受驱动日志" class="headerlink" title="接受驱动日志"></a>接受驱动日志</h2><ol><li>Dbgview接收日志。</li><li>TraceView 接受日志。</li></ol><p>Dbgview日志相关API KdPrint， KdPrintEx(网上参考方法很多，友情提示请以管理员权限启动Dbgview, 并且添加Capture Kernel选项)<br>TraceView日志相关API， WPP_INIT_TRACING， TraceEvents。(推荐这种，因为微软使用这种。这种方法是新方法，用于取代老方法)</p><h2 id="TraceView使用参考文档"><a href="#TraceView使用参考文档" class="headerlink" title="TraceView使用参考文档"></a>TraceView使用参考文档</h2><p>“开始”-&gt;“Windows Kits”-&gt;“Windows Software Development Kits”，打开一个文件夹，再在其中的“Tools-&gt;X64”目录下找到“TraceView.exe”。(右键发送到桌面，省的以后在找)</p><p>使用方法，File-&gt;PDF(Debug Inofmation)File选择，编译驱动的PDB。</p><p>通过OSRLOADER.exe安装驱动，通过PcHunter卸载驱动。查看日志是否输出到TraceView.exe。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/17/hello-world/"/>
    <url>/2022/01/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>![image-20220117021631484](/images/hello-world/image-20220117021631484.png</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
